"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/141JwkwGkW8Wu-cB57-uPK3H93r1NjfJT
"""

from sklearn.preprocessing import MinMaxScaler
import numpy as np
import pandas as pd
import time
import math
import matplotlib.pyplot as plt
from datetime import datetime as dt
from keras.models import load_model
import streamlit as st

period1 = int(time.mktime(dt(2011, 1, 1).timetuple()))
period2 = int(time.mktime(dt(2020, 12, 31).timetuple()))
interval = '1d'  # 1wk 1d 1m

st.title('stock trend prediction')
input = st.text_input('Enter stock ticker', 'AAPL')
query_string = f'https://query1.finance.yahoo.com/v7/finance/download/{input}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'
df = pd.read_csv(query_string)

st.subheader('data from 2011-2020')
st.write(df.describe())

st.subheader('Closing price vs Time Chart')
fig = plt.figure(figsize=(12, 6))
plt.plot(df.Close)
st.pyplot(fig)

df = df.drop(['Date', 'Adj Close'], axis=1)
df = df.dropna(how='any', axis=0)

ma100 = df.Close.rolling(100).mean()

st.subheader('Closing price vs Time Chart with MA100')
fig = plt.figure(figsize=(12, 6))
plt.plot(df.Close)
plt.plot(ma100, 'r')
st.pyplot(fig)

ma200 = df.Close.rolling(200).mean()

st.subheader('Closing price vs Time Chart with MA100 and MA200')
fig = plt.figure(figsize=(12, 6))
plt.plot(df.Close)
plt.plot(ma100, 'r')
plt.plot(ma200, 'g')
st.pyplot(fig)

train_arr = pd.DataFrame(df['Close'][0: int(len(df)*.7)])
test_arr = pd.DataFrame(df['Close'][int(len(df)*.7): int(len(df))])

scaler = MinMaxScaler(feature_range=(0, 1))

train_series = scaler.fit_transform(train_arr)

model = load_model('keras_modelTF.h5')

past_100_days = train_arr.tail(100)
final_df = past_100_days.append(test_arr, ignore_index=True)

input_data = scaler.fit_transform(final_df)

x_test = []
y_test = []

for i in range(100, input_data.shape[0]):
    x_test.append(input_data[i-100:i])
    y_test.append(input_data[i, 0])

x_test, y_test = np.array(x_test), np.array(y_test)
y_pred = model.predict(x_test)


scaler = scaler.scale_
scale_factor = 1/scaler[0]

y_pred = y_pred*scale_factor
y_test = y_test*scale_factor

st.subheader('Final Graph Original Vs Predicted Price')
fig = plt.figure(figsize=(12, 6))
plt.plot(y_test, 'b', label='original_price')
plt.plot(y_pred, 'r', label='predicted_price')
plt.xlabel('Time')
plt.ylabel('price')
plt.legend()
st.pyplot(fig)
